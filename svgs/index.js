const fs = require("node:fs");

const data = [
  {
    seoul: 21,
    month: "Jan",
  },
  {
    seoul: 28,
    month: "Feb",
  },
  {
    seoul: 41,
    month: "Mar",
  },
  {
    seoul: 73,
    month: "Apr",
  },
  {
    seoul: 99,
    month: "May",
  },
  {
    seoul: 144,
    month: "June",
  },
  {
    seoul: 319,
    month: "July",
  },
  {
    seoul: 249,
    month: "Aug",
  },
  {
    seoul: 131,
    month: "Sept",
  },
  {
    seoul: 55,
    month: "Oct",
  },
  {
    seoul: 48,
    month: "Nov",
  },
  {
    seoul: 25,
    month: "Dec",
  },
];

const testContent = `
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="chart" width="420" height="150" aria-labelledby="title" role="img">
  <title id="title">A bart chart showing information</title>
  <g class="bar" fill="blacK">
    <rect width="40" height="19"></rect>
    <text x="45" y="9.5" dy=".35em">4 apples</text>
  </g>
  <g class="bar" fill="blacK">
    <rect width="80" height="19" y="20"></rect>
    <text x="85" y="28" dy=".35em">8 bananas</text>
  </g>
  <g class="bar" fill="blacK">
    <rect width="150" height="19" y="40"></rect>
    <text x="150" y="48" dy=".35em">15 kiwis</text>
  </g>
  <g class="bar" fill="blacK">
    <rect width="160" height="19" y="60"></rect>
    <text x="161" y="68" dy=".35em">16 oranges</text>
  </g>
  <g class="bar" fill="blacK">
    <rect width="230" height="19" y="80"></rect>
    <text x="235" y="88" dy=".35em">23 lemons</text>
  </g>
</svg>`;

const testContent2 = `
<svg xmlns="http://www.w3.org/2000/svg" width="130" height="167" viewBox="0 0 130 167" fill="none" y="150">
<g>
<rect y="42" width="20" height="125" fill="#D9D9D9"/>
<rect x="22" y="61" width="20" height="106" fill="#D9D9D9"/>
<rect x="44" y="11" width="20" height="156" fill="#D9D9D9"/>
<rect x="66" y="120" width="20" height="47" fill="#D9D9D9"/>
<rect x="88" y="91" width="20" height="76" fill="#D9D9D9"/>
<rect x="110" y="72" width="20" height="95" fill="#D9D9D9"/>
</g>
</svg>`;

const testContent3 = `
<svg xmlns="http://www.w3.org/2000/svg" width="420" height="317" viewBox="0 0 420 317" fill="none">
${testContent}
${testContent2}
</svg>
`;

// <path d="M15.6364 106.955C15.6364 107.068 15.6269 107.17 15.608 107.259C15.5909 107.348 15.5739 107.409 15.5568 107.443L14.9659 107.273C15.0076 107.11 15.0227 106.966 15.0114 106.841C15 106.716 14.9441 106.605 14.8438 106.509C14.7453 106.41 14.5852 106.32 14.3636 106.239L14.0227 106.114L9.63636 107.727V107L13.1136 105.795V105.75L9.63636 104.545V103.818L14.6364 105.67C14.8617 105.754 15.0483 105.857 15.196 105.98C15.3456 106.103 15.4564 106.246 15.5284 106.409C15.6004 106.57 15.6364 106.752 15.6364 106.955ZM14.1023 99.3991C14.1023 99.6757 14.0502 99.9266 13.946 100.152C13.84 100.377 13.6875 100.556 13.4886 100.689C13.2879 100.821 13.0455 100.888 12.7614 100.888C12.5114 100.888 12.3087 100.839 12.1534 100.74C11.9962 100.642 11.8731 100.51 11.7841 100.345C11.6951 100.18 11.6288 99.9986 11.5852 99.7997C11.5398 99.599 11.5038 99.3973 11.4773 99.1946C11.4432 98.9295 11.4176 98.7145 11.4006 98.5497C11.3816 98.383 11.3504 98.2618 11.3068 98.1861C11.2633 98.1084 11.1875 98.0696 11.0795 98.0696H11.0568C10.7765 98.0696 10.5587 98.1463 10.4034 98.2997C10.2481 98.4512 10.1705 98.6813 10.1705 98.9901C10.1705 99.3101 10.2405 99.5611 10.3807 99.7429C10.5208 99.9247 10.6705 100.053 10.8295 100.126L10.6023 100.763C10.3371 100.649 10.1307 100.498 9.98295 100.308C9.83333 100.117 9.72917 99.9086 9.67045 99.6832C9.60985 99.456 9.57955 99.2325 9.57955 99.0128C9.57955 98.8726 9.59659 98.7116 9.63068 98.5298C9.66288 98.3461 9.73011 98.169 9.83239 97.9986C9.93466 97.8262 10.089 97.6832 10.2955 97.5696C10.5019 97.456 10.7784 97.3991 11.125 97.3991H14V98.0696H13.4091V98.1037C13.5038 98.1491 13.6051 98.2249 13.7131 98.331C13.821 98.437 13.9129 98.5781 13.9886 98.7543C14.0644 98.9304 14.1023 99.1454 14.1023 99.3991ZM13.5 99.2969C13.5 99.0317 13.4479 98.8082 13.3438 98.6264C13.2396 98.4427 13.1051 98.3045 12.9403 98.2116C12.7756 98.117 12.6023 98.0696 12.4205 98.0696H11.8068C11.8409 98.098 11.8722 98.1605 11.9006 98.2571C11.9271 98.3518 11.9508 98.4616 11.9716 98.5866C11.9905 98.7098 12.0076 98.83 12.0227 98.9474C12.036 99.063 12.0473 99.1567 12.0568 99.2287C12.0795 99.4029 12.1165 99.5658 12.1676 99.7173C12.2169 99.867 12.2917 99.9882 12.392 100.081C12.4905 100.172 12.625 100.217 12.7955 100.217C13.0284 100.217 13.2045 100.131 13.3239 99.9588C13.4413 99.7846 13.5 99.5639 13.5 99.2969ZM9.63636 95.6754L11.4205 94.63L9.63636 93.5845V92.8118L11.8182 94.2209L14 92.8118V93.5845L12.3068 94.63L14 95.6754V96.4482L11.8182 95.0618L9.63636 96.4482V95.6754ZM14 91.8551H9.63636V91.1847H14V91.8551ZM8.90909 91.5142C8.90909 91.6449 8.86458 91.7576 8.77557 91.8523C8.68655 91.9451 8.57955 91.9915 8.45455 91.9915C8.32955 91.9915 8.22254 91.9451 8.13352 91.8523C8.04451 91.7576 8 91.6449 8 91.5142C8 91.3835 8.04451 91.2718 8.13352 91.179C8.22254 91.0843 8.32955 91.0369 8.45455 91.0369C8.57955 91.0369 8.68655 91.0843 8.77557 91.179C8.86458 91.2718 8.90909 91.3835 8.90909 91.5142ZM10.6136 86.8658L10.7841 87.468C10.6837 87.5059 10.5862 87.5618 10.4915 87.6357C10.3949 87.7076 10.3153 87.8061 10.2528 87.9311C10.1903 88.0561 10.1591 88.2161 10.1591 88.4112C10.1591 88.6783 10.2206 88.9008 10.3438 89.0788C10.465 89.255 10.6193 89.343 10.8068 89.343C10.9735 89.343 11.1051 89.2824 11.2017 89.1612C11.2983 89.04 11.3788 88.8506 11.4432 88.593L11.6023 87.9453C11.697 87.5552 11.8419 87.2644 12.0369 87.0732C12.2301 86.8819 12.4792 86.7862 12.7841 86.7862C13.0341 86.7862 13.2576 86.8582 13.4545 87.0021C13.6515 87.1442 13.8068 87.343 13.9205 87.5987C14.0341 87.8544 14.0909 88.1518 14.0909 88.4908C14.0909 88.9358 13.9943 89.3042 13.8011 89.5959C13.608 89.8875 13.3258 90.0722 12.9545 90.1499L12.7955 89.5135C13.0303 89.4529 13.2064 89.3383 13.3239 89.1697C13.4413 88.9993 13.5 88.7768 13.5 88.5021C13.5 88.1896 13.4337 87.9415 13.3011 87.7578C13.1667 87.5722 13.0057 87.4794 12.8182 87.4794C12.6667 87.4794 12.5398 87.5324 12.4375 87.6385C12.3333 87.7446 12.2557 87.9074 12.2045 88.1271L12.0341 88.8544C11.9394 89.254 11.7926 89.5476 11.5938 89.7351C11.393 89.9207 11.142 90.0135 10.8409 90.0135C10.5947 90.0135 10.3769 89.9444 10.1875 89.8061C9.99811 89.666 9.84943 89.4756 9.74148 89.2351C9.63352 88.9927 9.57955 88.718 9.57955 88.4112C9.57955 87.9794 9.67424 87.6404 9.86364 87.3942C10.053 87.1461 10.303 86.9699 10.6136 86.8658ZM8.18182 82.8565H14V83.527H8.18182V82.8565ZM14.1023 80.3445C14.1023 80.621 14.0502 80.8719 13.946 81.0973C13.84 81.3227 13.6875 81.5017 13.4886 81.6342C13.2879 81.7668 13.0455 81.8331 12.7614 81.8331C12.5114 81.8331 12.3087 81.7839 12.1534 81.6854C11.9962 81.5869 11.8731 81.4553 11.7841 81.2905C11.6951 81.1257 11.6288 80.9439 11.5852 80.745C11.5398 80.5443 11.5038 80.3426 11.4773 80.1399C11.4432 79.8748 11.4176 79.6598 11.4006 79.495C11.3816 79.3284 11.3504 79.2071 11.3068 79.1314C11.2633 79.0537 11.1875 79.0149 11.0795 79.0149H11.0568C10.7765 79.0149 10.5587 79.0916 10.4034 79.245C10.2481 79.3965 10.1705 79.6267 10.1705 79.9354C10.1705 80.2554 10.2405 80.5064 10.3807 80.6882C10.5208 80.87 10.6705 80.9979 10.8295 81.0717L10.6023 81.7081C10.3371 81.5945 10.1307 81.4429 9.98295 81.2536C9.83333 81.0623 9.72917 80.8539 9.67045 80.6286C9.60985 80.4013 9.57955 80.1778 9.57955 79.9581C9.57955 79.8179 9.59659 79.657 9.63068 79.4751C9.66288 79.2914 9.73011 79.1143 9.83239 78.9439C9.93466 78.7715 10.089 78.6286 10.2955 78.5149C10.5019 78.4013 10.7784 78.3445 11.125 78.3445H14V79.0149H13.4091V79.049C13.5038 79.0945 13.6051 79.1702 13.7131 79.2763C13.821 79.3823 13.9129 79.5234 13.9886 79.6996C14.0644 79.8757 14.1023 80.0907 14.1023 80.3445ZM13.5 80.2422C13.5 79.977 13.4479 79.7536 13.3438 79.5717C13.2396 79.388 13.1051 79.2498 12.9403 79.157C12.7756 79.0623 12.6023 79.0149 12.4205 79.0149H11.8068C11.8409 79.0433 11.8722 79.1058 11.9006 79.2024C11.9271 79.2971 11.9508 79.407 11.9716 79.532C11.9905 79.6551 12.0076 79.7753 12.0227 79.8928C12.036 80.0083 12.0473 80.102 12.0568 80.174C12.0795 80.3482 12.1165 80.5111 12.1676 80.6626C12.2169 80.8123 12.2917 80.9335 12.392 81.0263C12.4905 81.1172 12.625 81.1626 12.7955 81.1626C13.0284 81.1626 13.2045 81.0765 13.3239 80.9041C13.4413 80.7299 13.5 80.5092 13.5 80.2422ZM14 77.0298H8.18182V76.3594H10.3295V76.3026C10.2538 76.2533 10.1572 76.1851 10.0398 76.098C9.92045 76.009 9.81439 75.8821 9.72159 75.7173C9.62689 75.5507 9.57955 75.3253 9.57955 75.0412C9.57955 74.6738 9.6714 74.3499 9.85511 74.0696C10.0388 73.7893 10.2992 73.5705 10.6364 73.4134C10.9735 73.2562 11.3712 73.1776 11.8295 73.1776C12.2917 73.1776 12.6922 73.2562 13.0312 73.4134C13.3684 73.5705 13.6297 73.7884 13.8153 74.0668C13.9991 74.3452 14.0909 74.6662 14.0909 75.0298C14.0909 75.3101 14.0445 75.5346 13.9517 75.7031C13.857 75.8717 13.75 76.0014 13.6307 76.0923C13.5095 76.1832 13.4091 76.2533 13.3295 76.3026V76.3821H14V77.0298ZM11.8182 76.3707C12.1477 76.3707 12.4384 76.3224 12.6903 76.2259C12.9403 76.1293 13.1364 75.9882 13.2784 75.8026C13.4186 75.617 13.4886 75.3897 13.4886 75.1207C13.4886 74.8404 13.4148 74.6065 13.267 74.419C13.1174 74.2296 12.9167 74.0876 12.6648 73.9929C12.411 73.8963 12.1288 73.848 11.8182 73.848C11.5114 73.848 11.2348 73.8954 10.9886 73.9901C10.7405 74.0829 10.5445 74.224 10.4006 74.4134C10.2547 74.6009 10.1818 74.8366 10.1818 75.1207C10.1818 75.3935 10.2509 75.6226 10.3892 75.8082C10.5256 75.9938 10.7169 76.134 10.9631 76.2287C11.2074 76.3234 11.4924 76.3707 11.8182 76.3707ZM14.0909 70.3224C14.0909 70.7429 13.9981 71.1056 13.8125 71.4105C13.625 71.7135 13.3636 71.9474 13.0284 72.1122C12.6913 72.2751 12.2992 72.3565 11.8523 72.3565C11.4053 72.3565 11.0114 72.2751 10.6705 72.1122C10.3277 71.9474 10.0606 71.7183 9.86932 71.4247C9.67614 71.1293 9.57955 70.7846 9.57955 70.3906C9.57955 70.1634 9.61742 69.9389 9.69318 69.7173C9.76894 69.4957 9.89205 69.294 10.0625 69.1122C10.2311 68.9304 10.4545 68.7855 10.733 68.6776C11.0114 68.5696 11.3542 68.5156 11.7614 68.5156H12.0455V71.8793H11.4659V69.1974C11.2197 69.1974 11 69.2467 10.8068 69.3452C10.6136 69.4418 10.4612 69.58 10.3494 69.7599C10.2377 69.938 10.1818 70.1482 10.1818 70.3906C10.1818 70.6577 10.2481 70.8887 10.3807 71.0838C10.5114 71.277 10.6818 71.4257 10.892 71.5298C11.1023 71.634 11.3277 71.6861 11.5682 71.6861H11.9545C12.2841 71.6861 12.5634 71.6293 12.7926 71.5156C13.0199 71.4001 13.1932 71.2401 13.3125 71.0355C13.4299 70.831 13.4886 70.5933 13.4886 70.3224C13.4886 70.1463 13.464 69.9872 13.4148 69.8452C13.3636 69.7012 13.2879 69.5772 13.1875 69.473C13.0852 69.3688 12.9583 69.2884 12.8068 69.2315L12.9886 68.5838C13.2083 68.652 13.4015 68.7666 13.5682 68.9276C13.733 69.0885 13.8617 69.2874 13.9545 69.5241C14.0455 69.7609 14.0909 70.027 14.0909 70.3224ZM8.18182 66.8253H14V67.4957H8.18182V66.8253Z" fill="black"/>
// <path d="M80.1136 187.636L81.1591 189.42L82.2045 187.636H82.9773L81.5682 189.818L82.9773 192H82.2045L81.1591 190.307L80.1136 192H79.3409L80.7273 189.818L79.3409 187.636H80.1136ZM87.468 192.102C87.1915 192.102 86.9406 192.05 86.7152 191.946C86.4898 191.84 86.3108 191.688 86.1783 191.489C86.0457 191.288 85.9794 191.045 85.9794 190.761C85.9794 190.511 86.0286 190.309 86.1271 190.153C86.2256 189.996 86.3572 189.873 86.522 189.784C86.6868 189.695 86.8686 189.629 87.0675 189.585C87.2682 189.54 87.4699 189.504 87.6726 189.477C87.9377 189.443 88.1527 189.418 88.3175 189.401C88.4841 189.382 88.6054 189.35 88.6811 189.307C88.7588 189.263 88.7976 189.187 88.7976 189.08V189.057C88.7976 188.777 88.7209 188.559 88.5675 188.403C88.416 188.248 88.1858 188.17 87.8771 188.17C87.5571 188.17 87.3061 188.241 87.1243 188.381C86.9425 188.521 86.8146 188.67 86.7408 188.83L86.1044 188.602C86.218 188.337 86.3696 188.131 86.5589 187.983C86.7502 187.833 86.9586 187.729 87.1839 187.67C87.4112 187.61 87.6347 187.58 87.8544 187.58C87.9946 187.58 88.1555 187.597 88.3374 187.631C88.5211 187.663 88.6982 187.73 88.8686 187.832C89.041 187.935 89.1839 188.089 89.2976 188.295C89.4112 188.502 89.468 188.778 89.468 189.125V192H88.7976V191.409H88.7635C88.718 191.504 88.6423 191.605 88.5362 191.713C88.4302 191.821 88.2891 191.913 88.1129 191.989C87.9368 192.064 87.7218 192.102 87.468 192.102ZM87.5703 191.5C87.8355 191.5 88.0589 191.448 88.2408 191.344C88.4245 191.24 88.5627 191.105 88.6555 190.94C88.7502 190.776 88.7976 190.602 88.7976 190.42V189.807C88.7692 189.841 88.7067 189.872 88.6101 189.901C88.5154 189.927 88.4055 189.951 88.2805 189.972C88.1574 189.991 88.0372 190.008 87.9197 190.023C87.8042 190.036 87.7105 190.047 87.6385 190.057C87.4643 190.08 87.3014 190.116 87.1499 190.168C87.0002 190.217 86.879 190.292 86.7862 190.392C86.6953 190.491 86.6499 190.625 86.6499 190.795C86.6499 191.028 86.736 191.205 86.9084 191.324C87.0826 191.441 87.3033 191.5 87.5703 191.5ZM91.1918 187.636L92.2372 189.42L93.2827 187.636H94.0554L92.6463 189.818L94.0554 192H93.2827L92.2372 190.307L91.1918 192H90.419L91.8054 189.818L90.419 187.636H91.1918ZM95.0121 192V187.636H95.6825V192H95.0121ZM95.353 186.909C95.2223 186.909 95.1096 186.865 95.0149 186.776C94.9221 186.687 94.8757 186.58 94.8757 186.455C94.8757 186.33 94.9221 186.223 95.0149 186.134C95.1096 186.045 95.2223 186 95.353 186C95.4837 186 95.5954 186.045 95.6882 186.134C95.7829 186.223 95.8303 186.33 95.8303 186.455C95.8303 186.58 95.7829 186.687 95.6882 186.776C95.5954 186.865 95.4837 186.909 95.353 186.909ZM100.001 188.614L99.3991 188.784C99.3613 188.684 99.3054 188.586 99.2315 188.491C99.1596 188.395 99.0611 188.315 98.9361 188.253C98.8111 188.19 98.651 188.159 98.456 188.159C98.1889 188.159 97.9664 188.221 97.7884 188.344C97.6122 188.465 97.5241 188.619 97.5241 188.807C97.5241 188.973 97.5848 189.105 97.706 189.202C97.8272 189.298 98.0166 189.379 98.2741 189.443L98.9219 189.602C99.312 189.697 99.6027 189.842 99.794 190.037C99.9853 190.23 100.081 190.479 100.081 190.784C100.081 191.034 100.009 191.258 99.8651 191.455C99.723 191.652 99.5241 191.807 99.2685 191.92C99.0128 192.034 98.7154 192.091 98.3764 192.091C97.9313 192.091 97.563 191.994 97.2713 191.801C96.9796 191.608 96.795 191.326 96.7173 190.955L97.3537 190.795C97.4143 191.03 97.5289 191.206 97.6974 191.324C97.8679 191.441 98.0904 191.5 98.3651 191.5C98.6776 191.5 98.9257 191.434 99.1094 191.301C99.295 191.167 99.3878 191.006 99.3878 190.818C99.3878 190.667 99.3348 190.54 99.2287 190.438C99.1226 190.333 98.9598 190.256 98.7401 190.205L98.0128 190.034C97.6132 189.939 97.3196 189.793 97.1321 189.594C96.9465 189.393 96.8537 189.142 96.8537 188.841C96.8537 188.595 96.9228 188.377 97.0611 188.188C97.2012 187.998 97.3916 187.849 97.6321 187.741C97.8745 187.634 98.1491 187.58 98.456 187.58C98.8878 187.58 99.2268 187.674 99.473 187.864C99.7211 188.053 99.8973 188.303 100.001 188.614ZM104.011 186.182V192H103.34V186.182H104.011ZM106.523 192.102C106.246 192.102 105.995 192.05 105.77 191.946C105.545 191.84 105.366 191.688 105.233 191.489C105.1 191.288 105.034 191.045 105.034 190.761C105.034 190.511 105.083 190.309 105.182 190.153C105.28 189.996 105.412 189.873 105.577 189.784C105.741 189.695 105.923 189.629 106.122 189.585C106.323 189.54 106.525 189.504 106.727 189.477C106.992 189.443 107.207 189.418 107.372 189.401C107.539 189.382 107.66 189.35 107.736 189.307C107.813 189.263 107.852 189.187 107.852 189.08V189.057C107.852 188.777 107.776 188.559 107.622 188.403C107.471 188.248 107.241 188.17 106.932 188.17C106.612 188.17 106.361 188.241 106.179 188.381C105.997 188.521 105.869 188.67 105.795 188.83L105.159 188.602C105.273 188.337 105.424 188.131 105.614 187.983C105.805 187.833 106.013 187.729 106.239 187.67C106.466 187.61 106.689 187.58 106.909 187.58C107.049 187.58 107.21 187.597 107.392 187.631C107.576 187.663 107.753 187.73 107.923 187.832C108.096 187.935 108.239 188.089 108.352 188.295C108.466 188.502 108.523 188.778 108.523 189.125V192H107.852V191.409H107.818C107.773 191.504 107.697 191.605 107.591 191.713C107.485 191.821 107.344 191.913 107.168 191.989C106.991 192.064 106.777 192.102 106.523 192.102ZM106.625 191.5C106.89 191.5 107.114 191.448 107.295 191.344C107.479 191.24 107.617 191.105 107.71 190.94C107.805 190.776 107.852 190.602 107.852 190.42V189.807C107.824 189.841 107.761 189.872 107.665 189.901C107.57 189.927 107.46 189.951 107.335 189.972C107.212 189.991 107.092 190.008 106.974 190.023C106.859 190.036 106.765 190.047 106.693 190.057C106.519 190.08 106.356 190.116 106.205 190.168C106.055 190.217 105.934 190.292 105.841 190.392C105.75 190.491 105.705 190.625 105.705 190.795C105.705 191.028 105.791 191.205 105.963 191.324C106.137 191.441 106.358 191.5 106.625 191.5ZM109.837 192V186.182H110.508V188.33H110.565C110.614 188.254 110.682 188.157 110.769 188.04C110.858 187.92 110.985 187.814 111.15 187.722C111.317 187.627 111.542 187.58 111.826 187.58C112.193 187.58 112.517 187.671 112.798 187.855C113.078 188.039 113.297 188.299 113.454 188.636C113.611 188.973 113.69 189.371 113.69 189.83C113.69 190.292 113.611 190.692 113.454 191.031C113.297 191.368 113.079 191.63 112.8 191.815C112.522 191.999 112.201 192.091 111.837 192.091C111.557 192.091 111.333 192.045 111.164 191.952C110.996 191.857 110.866 191.75 110.775 191.631C110.684 191.509 110.614 191.409 110.565 191.33H110.485V192H109.837ZM110.496 189.818C110.496 190.148 110.545 190.438 110.641 190.69C110.738 190.94 110.879 191.136 111.065 191.278C111.25 191.419 111.478 191.489 111.746 191.489C112.027 191.489 112.261 191.415 112.448 191.267C112.638 191.117 112.78 190.917 112.874 190.665C112.971 190.411 113.019 190.129 113.019 189.818C113.019 189.511 112.972 189.235 112.877 188.989C112.784 188.741 112.643 188.545 112.454 188.401C112.266 188.255 112.031 188.182 111.746 188.182C111.474 188.182 111.245 188.251 111.059 188.389C110.873 188.526 110.733 188.717 110.638 188.963C110.544 189.207 110.496 189.492 110.496 189.818ZM116.545 192.091C116.124 192.091 115.762 191.998 115.457 191.812C115.154 191.625 114.92 191.364 114.755 191.028C114.592 190.691 114.511 190.299 114.511 189.852C114.511 189.405 114.592 189.011 114.755 188.67C114.92 188.328 115.149 188.061 115.442 187.869C115.738 187.676 116.083 187.58 116.477 187.58C116.704 187.58 116.928 187.617 117.15 187.693C117.371 187.769 117.573 187.892 117.755 188.062C117.937 188.231 118.082 188.455 118.19 188.733C118.298 189.011 118.352 189.354 118.352 189.761V190.045H114.988V189.466H117.67C117.67 189.22 117.621 189 117.522 188.807C117.425 188.614 117.287 188.461 117.107 188.349C116.929 188.238 116.719 188.182 116.477 188.182C116.21 188.182 115.978 188.248 115.783 188.381C115.59 188.511 115.442 188.682 115.337 188.892C115.233 189.102 115.181 189.328 115.181 189.568V189.955C115.181 190.284 115.238 190.563 115.352 190.793C115.467 191.02 115.627 191.193 115.832 191.312C116.036 191.43 116.274 191.489 116.545 191.489C116.721 191.489 116.88 191.464 117.022 191.415C117.166 191.364 117.29 191.288 117.394 191.188C117.498 191.085 117.579 190.958 117.636 190.807L118.283 190.989C118.215 191.208 118.101 191.402 117.94 191.568C117.779 191.733 117.58 191.862 117.343 191.955C117.106 192.045 116.84 192.091 116.545 192.091ZM120.042 186.182V192H119.371V186.182H120.042Z" fill="black"/>

const testGraph = `
<svg xmlns="http://www.w3.org/2000/svg" width="190" height="200" viewBox="0 0 190 200" fill="none">
<rect x="35" y="43" width="20" height="125" fill="#D9D9D9"/>
<rect x="57" y="62" width="20" height="106" fill="#D9D9D9"/>
<rect x="79" y="12" width="20" height="156" fill="#D9D9D9"/>
<rect x="101" y="121" width="20" height="47" fill="#D9D9D9"/>
<rect x="123" y="92" width="20" height="76" fill="#D9D9D9"/>
<rect x="145" y="73" width="20" height="95" fill="#D9D9D9"/>
<text x="-85" y="16" style="font-size: 14px;" transform="rotate(-90)" text-anchor="middle"><tspan fill="black">y-axis label</tspan></text>
<text x="95" y="192" style="font-size: 14px;" transform="rotate(0)" text-anchor="middle"><tspan fill="black">x-axis label</tspan></text>
<line x1="30" y1="168.425" x2="167" y2="168.425" stroke="red"/>
<line x1="45.5" y1="168" x2="45.5" y2="172" stroke="black"/>
<line x1="30" y1="157.5" x2="34" y2="157.5" stroke="black"/>
<line x1="30" y1="77.5" x2="34" y2="77.5" stroke="black"/>
<line x1="30" y1="117.5" x2="34" y2="117.5" stroke="black"/>
<line x1="30" y1="37.5" x2="34" y2="37.5" stroke="black"/>
<line x1="30" y1="137.5" x2="34" y2="137.5" stroke="black"/>
<line x1="30" y1="57.5" x2="34" y2="57.5" stroke="black"/>
<line x1="30" y1="97.5" x2="34" y2="97.5" stroke="black"/>
<line x1="30" y1="17.5" x2="34" y2="17.5" stroke="black"/>
<line x1="30" y1="147.5" x2="34" y2="147.5" stroke="black"/>
<line x1="30" y1="67.5" x2="34" y2="67.5" stroke="black"/>
<line x1="30" y1="107.5" x2="34" y2="107.5" stroke="black"/>
<line x1="30" y1="27.5" x2="34" y2="27.5" stroke="black"/>
<line x1="30" y1="127.5" x2="34" y2="127.5" stroke="black"/>
<line x1="30" y1="47.5" x2="34" y2="47.5" stroke="black"/>
<line x1="30" y1="87.5" x2="34" y2="87.5" stroke="black"/>
<line x1="30" y1="7.5" x2="34" y2="7.5" stroke="black"/>
<line x1="67.5" y1="168" x2="67.5" y2="172" stroke="black"/>
<line x1="89.5" y1="168" x2="89.5" y2="172" stroke="black"/>
<line x1="111.5" y1="168" x2="111.5" y2="172" stroke="black"/>
<line x1="133.5" y1="168" x2="133.5" y2="172" stroke="black"/>
<line x1="155.5" y1="168" x2="155.5" y2="172" stroke="black"/>
<line x1="33.5" y1="7" x2="33.5" y2="172" stroke="red"/>
</svg>
`;

class Builder {
  maxValue = 0;
  height = 100;
  width = 100;
  x = 0;
  y = 0;
  padding = [10, 10, 10, 10];
  axisStrokeWidth = 0.3;
  axisIndicatorLength = 2;
  fontSize = 3.2;
  barWidth = 10;
  barGap = 0.8;

  constructor(data, xAxisLabel, height = 100, x = 0, y = 0) {
    this.data = data;
    this.xAxisLabel = xAxisLabel;
    this.scale = height / this.height;
    this.y = y;
    this.x = x;

    this.calcMaxValue();
    this.mappedData = this.scaleValues();

    this.barWidth = this.barWidth * this.scale;
    this.barGap = this.barGap * this.scale;
    this.width = data.length * (this.barWidth + this.barGap) + this.barGap;
    this.height = this.height * this.scale;
    this.padding = this.padding.map((v) => v * this.scale);

    console.log(this);
  }

  getWidth() {
    return this.width + this.padding[1] + this.padding[3];
  }
  getHeight() {
    return this.height + this.padding[0] + this.padding[2];
  }

  get svg() {
    const svgWidth = this.width + this.padding[1] + this.padding[3];
    const svgHeight = this.height + this.padding[0] + this.padding[2];

    return `<svg xmlns="http://www.w3.org/2000/svg" width="${svgWidth}" height="${svgHeight}" viewBox="0 0 ${svgWidth} ${svgHeight}" fill="none" y="${this.y}" x="${this.x}">
        ${this.plotXAxis()}
        ${this.plotYAxis()}
        ${this.plotData()}
      </svg>`;
  }

  plotData() {
    let offset = this.barGap;

    return this.mappedData
      .map((data) => {
        let x = this.padding[3];
        let y = this.padding[0];

        const val = data.seoul;

        y = y + this.height - val;
        x = x + offset;
        offset = offset + this.barWidth + this.barGap;

        return `<rect x="${x}" y="${y}" width="${this.barWidth}" height="${val}" fill="#D9D9D9"/>`;
      })
      .join();
  }

  plotXAxis() {
    const lineStroke = Math.min(this.axisStrokeWidth * this.scale, 1);
    const indicatorLength = this.axisIndicatorLength * this.scale;
    const fontSize = this.fontSize * this.scale;

    const x = this.padding[3];
    const y = this.height + this.padding[0];
    const width = this.width + this.padding[3];

    let offset = this.padding[3] + this.barGap;
    const labels = this.mappedData.map((e) => {
      const x1 = offset + this.barWidth / 2;
      const y1 = y;
      const x2 = x1;
      const y2 = y1 + indicatorLength;

      offset = offset + this.barWidth + this.barGap;
      return `
        <line x1="${x1}" y1="${y1}" x2="${x2}" y2="${y2}" stroke="black" stroke-width="${lineStroke}"/>
        <text x="${x1}" y="${y1 + fontSize + 2 * this.scale}" style="font-size: ${fontSize}px;" text-anchor="middle"><tspan fill="black">${e[this.xAxisLabel]}</tspan></text>
      `;
    });

    return `<rect x="${x}" y="${y}" width="${width - x}" height="${lineStroke}" fill="black" />${labels}`;
  }

  plotYAxis() {
    const lineWidth = Math.min(this.axisStrokeWidth * this.scale, 1);

    const x1 = this.padding[3] - lineWidth;
    const y1 = this.padding[0];
    const y2 = this.height + this.padding[0] + lineWidth;

    return `<rect x="${x1}" y="${y1}" width="${lineWidth}" height="${y2 - y1}" fill="black" />`;
  }

  calcMaxValue() {
    for (const record of this.data) {
      const recordKeys = Object.keys(record);
      let max = 0;
      for (const key of recordKeys) {
        if (key === this.xAxisLabel) continue;
        if (typeof record[key] !== "number") continue;

        max = Math.max(record[key], max);
      }

      this.maxValue = Math.max(max, this.maxValue);
    }
  }

  scaleValues() {
    // calc 100% value
    let ceiling = this.maxValue;
    while (ceiling % 10 !== 0) {
      ceiling++;
    }
    ceiling += 10;

    const mappedData = this.data.map((e) => {
      const val = e.seoul;
      return { ...e, seoul: (val / ceiling) * 100 * this.scale };
    });
    return mappedData;
  }
}

function writeSVG(path, content) {
  console.log("writing to file...");
  try {
    fs.writeFileSync(path, content);
    console.log("write success!");
  } catch (err) {
    console.error(err);
  }
}

function main() {
  const builder = new Builder(data, "month", 400);
  // const builder2 = new Builder(data, "month", 300, 0, 120);
  // const builder3 = new Builder(data, "month", 100, builder.getWidth(), 0);
  // const builder4 = new Builder(
  //   data,
  //   "month",
  //   100,
  //   builder.getWidth() + builder3.getWidth(),
  //   0,
  // );
  const svg = builder.svg;
  // const svg2 = builder2.svg;
  // const svg3 = builder3.svg;
  // const svg4 = builder4.svg;

  // const merge = `
  // <svg xmlns="http://www.w3.org/2000/svg" width="480" height="480" viewBox="0 0 480 480" fill="none">
  //   ${svg}
  //   ${svg2}
  //   ${svg3}
  //   ${svg4}
  // </svg>
  // `;

  writeSVG("./test-class.svg", svg);
  // writeSVG("./test-class.svg", merge);
  // writeSVG("./test.svg", testContent);
  // writeSVG("./test2.svg", testContent2);
  // writeSVG("./test3.svg", testContent3);
  // writeSVG("./test4.svg", testGraph);
}

main();

const dataset = [
  {
    london: 59,
    paris: 57,
    newYork: 86,
    seoul: 21,
    month: "Jan",
  },
  {
    london: 50,
    paris: 52,
    newYork: 78,
    seoul: 28,
    month: "Fev",
  },
  {
    london: 47,
    paris: 53,
    newYork: 106,
    seoul: 41,
    month: "Mar",
  },
  {
    london: 54,
    paris: 56,
    newYork: 92,
    seoul: 73,
    month: "Apr",
  },
  {
    london: 57,
    paris: 69,
    newYork: 92,
    seoul: 99,
    month: "May",
  },
  {
    london: 60,
    paris: 63,
    newYork: 103,
    seoul: 144,
    month: "June",
  },
  {
    london: 59,
    paris: 60,
    newYork: 105,
    seoul: 319,
    month: "July",
  },
  {
    london: 65,
    paris: 60,
    newYork: 106,
    seoul: 249,
    month: "Aug",
  },
  {
    london: 51,
    paris: 51,
    newYork: 95,
    seoul: 131,
    month: "Sept",
  },
  {
    london: 60,
    paris: 65,
    newYork: 97,
    seoul: 55,
    month: "Oct",
  },
  {
    london: 67,
    paris: 64,
    newYork: 76,
    seoul: 48,
    month: "Nov",
  },
  {
    london: 61,
    paris: 70,
    newYork: 103,
    seoul: 25,
    month: "Dec",
  },
];
